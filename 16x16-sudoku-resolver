#include <stdlib.h>
#include <stdio.h>

char dec2hex(int n) {
    if (n >= 0 && n <= 9)
        return n + '0';
    switch (n) {
        case 10:
            return 'A';
            break;
        case 11:
            return 'B';
            break;
        case 12:
            return 'C';
            break;
        case 13:
            return 'D';
            break;
        case 14:
            return 'E';
            break;
        case 15:
            return 'F';
            break;
    }
    
    return 'Z';
}

void matrix_free(char **m, int row) {
    int i;
    for (i = 0; i < row; i++)
        free(m[i]);
    free(m);
}

void matrix_print(char **mat, int col, int row) {
    int i, j;
    for (i = 0; i < row; i++) {
        for (j = 0; j < col; j++)
            printf("%c", mat[i][j]);
        printf("\n");
    }
}

char **matrix_create(int col, int row) {
    int i;
    char **m;
    
    m = (char **) malloc(sizeof(char *) * row);
    for (i = 0; i < row; i++)
        m[i] = (char *) malloc(sizeof(char) * col);
    
    return m;
}

char **matrix_read(char *path, int col, int row) {
    int i, j;
    FILE *fp;
    char **m;
    
    fp = fopen(path,"r");
    
    m = matrix_create(col,row);
    
    for (i = 0; i < row; i++) {
        for (j = 0; j < col; j++)
            fscanf(fp, "%c ", &m[i][j]);
    }
    
    fclose(fp);
    
    return m;
}

int checkTable(char **table, int col, int row) {
    int i, j;
    for (i = 0; i < row; i++) {
        for (j = 0; j < col; j++) {
            if (table[i][j] == '.')
                return 1;
        }
    }
    return 0;
}

char checkCel(char **table, int i, int j, int row, int col) {
    int k, l, m, cont = 0;
    int *vec = NULL;
    
    // se a posicao ja estiver preenchida, retorna uma letra qualquer
    if (table[i][j] != '.') return 'Z';
    
    // preenche um vetor auxiliar com os inteiros de 0 - 15
    vec = (int *) malloc(sizeof(int) * 16);
    for (k = 0; k < 16; k++)
        vec[k] = k;
    
    // testa os 16 numeros
    for (k = 0; k < 16; k++) {
        // para cada posicao da linha
        for (l = 0; l < col; l++) {
            // se na linha houver um numero igual a k, esse numero nao pode ser usado
            if (table[i][l] == dec2hex(k)) {
                vec[k] = -1;
                break;
            }
        }
    }
    
    // testa os 16 numeros
    for (k = 0; k < 16; k++) {
        // para cada posicao da coluna
        for (l = 0; l < row; l++) {
            // se na coluna houver um numero igual a k, esse numero nao pode ser usado
            if (table[l][j] == dec2hex(k)) {
                vec[k] = -1;
                break;
            }
        }
    }
    
    // testa os 16 numeros
    for (k = 0; k < 16; k++) {
        // para cada posicao do quadrado correspondente
        for (l = (i/4)*4; l < ((i/4)*4)+4; l++) {
            for (m = (j/4)*4; m < ((j/4)*4)+4; m++) {
                // se no quadrado houver um numero igual a k, esse numero nao pode ser usado
                if (table[l][m] == dec2hex(k)) {
                    vec[k] = -1;
                    break;
                }
            }
        }
    }
    
    // confere se existe apenas uma possibilidade para aquela celula
    for (k = 0; k < 16; k++)
        if (vec[k] >= 0)
            cont++;
    
    // se existir mais de uma possibilidade, retorne "invalido"
    if (cont != 1) return 'Z';
    
    // caso contrario, retorne a unica possibilidade em forma hexadecimal
    for (k = 0; k < 16; k++)
        if (vec[k] >= 0)
            cont = vec[k];
    
    free(vec);
    
    return dec2hex(cont);
}

void playgame(char **table, int col, int row) {
    int i, j;
    
    for (i = 0; i < row; i++) {
        for (j = 0; j < col; j++) {
            if (checkCel(table,i,j,row,col) >= '0'  && checkCel(table,i,j,row,col) <= 'F') {
                table[i][j] = checkCel(table,i,j,row,col);
            }
        }
    }
    
}

int main() {
    int row, col;
    char inputfile[6];
    char **table;

    row = 16;
    col = 16;
    
    // lÃª do arquivo o sudoku e coloca em uma matriz 16x16
    scanf("%s", inputfile);
    table = matrix_read(inputfile,col,row);
    
    // enquanto a tabela nao estiver preenchida, jogue
    while (checkTable(table,col,row) == 1)
       playgame(table,col,row);
    
    // imprimi o jogo completo
    matrix_print(table,col,row);
    
    matrix_free(table,row);
    return 0;
}
